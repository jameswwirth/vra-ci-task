package:
    manifest:
        headlessExecution: true
        lifecycle:
            # Note the paths written in the action sections. If they don't match
            # any of the install paths in the attachments section, the tool will
            # warn you, but it will make a package. This is so you can address
            # executables that are on the GW but not in this package, but this
            # requires a full path to be specified in the action section.
            - phase: verify
              action: <parent directories of build machine>/example-iotc-package/package-source/verify.sh
            - phase: execute
              action: <parent directories of build machine>/example-iotc-package/package-source/execute.sh

              # This phase's action matches the install path of the validate.sh
              # attachment, so no warning will be issued.
            - phase: validate
              action: <parent directories of build machine>/example-iotc-package/package-source/validate_package.sh

              # This phase's action points to an attachment that doesn't match
              # any install path, even though there is an attachment named activate.sh
            - phase: activate
              action: activate.sh
            - phase: reset
              action: <parent directories of gateway>/reset.sh
    attachments:
        # path describe where the attachments are on the system you're building the package.
        # installPath describes where on the gateway the attachment will be installed.
        # If no installPath is added, the 'path' value will be used.
        # Any the directories in the installPaths that don't exist on the gateway
        # will be created.
        - path: <parent directories of build machine>/example-iotc-package/package-source/test_file.txt
        - path: <parent directories of build machine>/example-iotc-package/package-source/verify.sh
        - path: <parent directories of build machine>/example-iotc-package/package-source/execute.sh
        - path: <parent directories of build machine>/example-iotc-package/package-source/validate.sh
          # This will install the validate.sh attachment
          # in the same directories but named validate_package.sh
          installPath: <parent directories of build machine>/example-iotc-package/package-source/validate_package.sh
        - path: <parent directories of build machine>/example-iotc-package/package-source/activate.sh
        - path: <parent directories of build machine>/example-iotc-package/package-source/reset.sh
          # You can specify a completely different directory
          # for attachment installation
          installPath: <parent directories of gateway>/reset.sh

    name: hello_iotcp

    # This is one of the many ways you can create a multiline string in yaml
    description: "A test IoT Center package with\n
    a multiline description."

    version: 1.1.0

    # This tag is empty. That means it will be autofilled by the tool.
    # It will try to use the machine's architecture first, and will
    # default to noarch if it can't determine it.
    # This behaviour is the same for os, where the default is noos.
    architecture:

    # This is just a string so you could write anything, but there are
    # standardized names for many of the operating systems
    os: linux

    # This is a simple array of strings which are just that - labels by
    # which you could search a package in Pulse IoT Center
    labels:
      - test
      - example